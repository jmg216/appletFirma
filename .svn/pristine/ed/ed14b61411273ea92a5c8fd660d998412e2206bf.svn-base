/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JavaApplet.java
 *
 * Created on 04/02/2011, 09:27:10 AM
 */

package appletaplication;

//import java.security.Certificate;
import java.awt.Dialog;
import java.io.*;
import java.lang.reflect.Field;
import java.security.*;
import java.security.cert.Certificate;
import java.security.cert.*;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import netscape.javascript.JSObject;
import nl.bitwalker.useragentutils.UserAgent;
import org.bouncycastle.cms.*;
import org.bouncycastle.jce.cert.CertStore;
import org.bouncycastle.jce.cert.CertStoreException;
import org.bouncycastle.jce.cert.CollectionCertStoreParameters;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.bouncycastle.util.encoders.Base64;
import uy.com.isaltda.tokens.store.PKCS11CertStoreImpl;
import uy.com.isaltda.tokens.store.SofisCertificate;
import uy.com.isaltda.tokens.store.StoreManagment;
import uy.com.isaltda.tokens.store.exception.DriverException;
import uy.com.isaltda.tokens.store.exception.StoreInvalidPasswordException;
import uy.com.isaltda.tokens.util.ConfigurationUtil;
import uy.com.isaltda.tokens.util.MessagesUtil;

/**
 *
 * @author Francisco Alvarez
 */
public class JavaApplet extends javax.swing.JApplet {
    private String firma;
    
    private String usuario;
    
    private HashMap certs;
    private HashMap aliasHash;
    private KeyStore keystore;
    private boolean esJava;
    private String seleccionado;
    private char[] contra;
    private int error;
    private boolean primera = true;
    private String hash;
    private String subform;
    private boolean firmaParaBorrar;
    
    boolean todosLosUsuarios = true;
    
    //el manejador de los Stores de los certificados
    StoreManagment storeMg = new StoreManagment();
    //el dialogo el cual está abriendo este panel
    Dialog dialog = null;
    //el dialogo donde se abre el panel de Working
    Dialog workingDialog = null;
    //el entorno de ejecución del Applet
    UserAgent userAgent = null;
    MessagesUtil msgUtil;
    ConfigurationUtil cfgUtil;
    
    String modelo;
    String pathDriver;

    /** Initializes the applet JavaApplet */
    @Override
    public void init() {
        //Si es la primera vez que ejecuto el programa inicializo los componentes GUI
        if(primera){
            initComponents();
        }
        //inicializo las variables globales
        primera=false;
        okButton.setEnabled(false);
        firma = "NO";
        
        usuario = getParameter("usuario") != null ? getParameter("usuario").toUpperCase() : null;
        
        todosLosUsuarios = getParameter("todosLosUsuarios") != null && getParameter("todosLosUsuarios").toUpperCase().equals("SI");
        
        hash = getParameter("texto");
        subform = getParameter("subform");
        firmaParaBorrar = Boolean.parseBoolean(getParameter("esBorrado"));

        //Creo el modelo de la lista donde se muestran los certificados
        ListSelectionModel selm = lista.getSelectionModel();
        selm.addListSelectionListener(new ListSelectionListener() {
                                                public void valueChanged(ListSelectionEvent e) {
                                                    okButton.setEnabled(true);
                                                }
                                          });
        pass.setText("");
        pass1.setText("");
        //lista.addComponentListener(new ListListener());
        //lista.addItemListener(new ListListener());
        error=1;
        contra=null;

        //Seteo el tamaño del applet y muestro el panel principal
        this.resize(484, 169);
        principal.setVisible(true);
        noCerts.setVisible(false);
        password.setVisible(false);
        finalizar.setVisible(false);
        passwordError.setVisible(false);
        hayError.setVisible(false);

        //Agrego el BouncyCastleProvider como proveedor.
        Security.addProvider(new BouncyCastleProvider());

        certs = new HashMap();
        aliasHash = new HashMap();

        try{
            igdocKeystore();
        }catch(Exception ex){
            certs = new HashMap();
            aliasHash = new HashMap();
            
        }
        try {
            //Llamo a la función que carga los certificados ubicados en la maquina virtula de java.
            if(certs.isEmpty() && !isMac())
                javaKeystore();
        } catch (Exception ex) {
            certs = new HashMap();
            aliasHash = new HashMap();
        }
        try{
            if(certs.isEmpty() && isOSWindows())
                windowsKeystore();
        }catch(Exception ex){
            certs = new HashMap();
            aliasHash = new HashMap();
        }
        if (certs.isEmpty()){
            //Si no encontré ningún certificado en ningúna de las almacenes, Muestro
            //el panel que informa lo dicho anteriormente.
            principal.setVisible(false);
            noCerts.setVisible(true);
            password.setVisible(false);
            finalizar.setVisible(false);
            passwordError.setVisible(false);
            hayError.setVisible(false);
        }
    }

    //Función que carga los certificados del almacén de windows
    private void windowsKeystore() throws Exception{
        Certificate c;
        //Obtengo el almacén de windows
        keystore = KeyStore.getInstance("Windows-MY");
        keystore.load(null,null);
        //El almacen de windows posee un BUG con respecto a los alias de los
        //certificados ya que dichos alias pueden no ser únicos por lo que los modifico
        //para obtener unicidad en los alias.
        _fixAliases(keystore);

        boolean valido;
        Enumeration enumer = keystore.aliases();
        ArrayList<String[]> elementos = new ArrayList();
        String[] elem;
        SimpleDateFormat simpDate = new SimpleDateFormat("dd/MM/yyyy");
        String fecha;
        //TableModel modelo = new DefaultTableModel(new Object[][]{},new String [] {"Nombre", "Emisor", "Fecha validez"});
        //Recorro todos los certificados del almace´n de windows para obtener los
        //certificados del usuario logueado.
        for (; enumer.hasMoreElements(); ) {
            valido = true;
            String alias = (String)enumer.nextElement();
            c = (Certificate) keystore.getCertificate(alias);
            X509Certificate x509cert = (X509Certificate)c;
            Principal nombre = x509cert.getSubjectDN();
            Principal emisor = x509cert.getIssuerDN();
            String issuerDn = emisor.getName();

            try{
                x509cert.checkValidity();
            } catch (CertificateExpiredException exe) {
                valido = false;
            } catch (CertificateNotYetValidException exe) {
                valido = false;
            }
            String subjectDn = nombre.getName();

            if((getCN(subjectDn).toUpperCase().equals(usuario) || todosLosUsuarios) && valido){
                //Si el certificado es del usuario logueado y además la entidad emisora es de confianza
                //y además el certificado es válido, lo incerto en un HashMap de certificados.
                //combo.add(getCN(issuerDn));
                fecha= simpDate.format(x509cert.getNotBefore())+"-"+simpDate.format(x509cert.getNotAfter());
                elem = new String [] {getCN(subjectDn), getCN(issuerDn),fecha};
                elementos.add(elem);

                //lista.add(getCN(subjectDn)+" - "+getCN(issuerDn)+" - "+x509cert.getNotAfter());
                //certs.put(getCN(subjectDn)+" - "+getCN(issuerDn)+" - "+fecha,x509cert);
                //aliasHash.put(getCN(subjectDn)+" - "+getCN(issuerDn)+" - "+fecha,alias);
                certs.put(String.valueOf(certs.size()),x509cert);
                aliasHash.put(String.valueOf(aliasHash.size()),alias);
            }
            //Inicializo el modelo de la lista que despliega los certificados e inserto los mismos
            MyTableModel modelo = new MyTableModel();
            modelo.addColumn("Nombre");
            modelo.addColumn("Emisor");
            modelo.addColumn("Fecha de validez");
            for(int i=0;i<elementos.size();i++){
                    modelo.addRow(elementos.get(i));
            }
            //MyTableModel modelo = new MyTableModel(auxElem,new String [] {"Nombre", "Emisor", "Fecha validez"});
            lista.setModel(modelo);
        }
        esJava=false;
    }

    //función que obtiene los certificados del almacén de java para el usuario logueado
    private void javaKeystore() throws Exception{
        Certificate c;
        String keystoreFilename;
        if(isOSWindows()){
            //Si estoy en windows obtengo la ruta del archivo que contiene el almacén
            File file = new File(System.getenv("APPDATA").replace("\\", "/")+"/Sun/Java/Deployment/security/trusted.clientcerts");
            if (file.exists()){
                //Si el archivo existe, obtendo el path del mismo y además quiere decir que estoy en windows XP.
                keystoreFilename = System.getenv("APPDATA").replace("\\", "/")+"/Sun/Java/Deployment/security/trusted.clientcerts";
            }else{
                //Si el archivo no existe puede ser que esté en Windows Vista o Windows 7 por lo que supongo que el archivo se va a encontrar en el siguiente path
                keystoreFilename = System.getProperty("user.home").replace("\\", "/")+"/AppData/LocalLow/Sun/Java/Deployment/security/trusted.clientcerts";
            }
        }else{
            //Si estoy en linux obtengo el path del almacén.
            keystoreFilename = System.getProperty("user.home").replace("\\", "/")+"/.java/deployment/security/trusted.clientcerts";
        }
        FileInputStream fIn = new FileInputStream(keystoreFilename);
        keystore = KeyStore.getInstance("JKS");
        keystore.load(fIn, null);
        fIn.close();
        boolean valido;
        ArrayList<String[]> elementos = new ArrayList();
        String[] elem;
        Enumeration enumer = keystore.aliases();
        SimpleDateFormat simpDate = new SimpleDateFormat("dd/MM/yyyy");
        String fecha;
        //Recorro todos los certificados para insertar los certificados del usuario logueado
        for (; enumer.hasMoreElements(); ) {
            valido = true;
            String alias = (String)enumer.nextElement();
            c = (Certificate) keystore.getCertificate(alias);
            X509Certificate x509cert = (X509Certificate)c;
            Principal nombre = x509cert.getSubjectDN();
            Principal emisor = x509cert.getIssuerDN();
            String issuerDn = emisor.getName();
            try{
                x509cert.checkValidity();
            } catch (CertificateExpiredException exe) {
                    valido = false;
            } catch (CertificateNotYetValidException exe) {
                valido = false;
            }
            String subjectDn = nombre.getName();
            if((getCN(subjectDn).toUpperCase().equals(usuario) || todosLosUsuarios) && valido){
                //Si el certificado es del usuario y además es válido, entonces lo inserto en un HashMap de certificados.
                fecha= simpDate.format(x509cert.getNotBefore())+"-"+simpDate.format(x509cert.getNotAfter());
                elem = new String [] {getCN(subjectDn), getCN(issuerDn),fecha};
                elementos.add(elem);
                //lista.add(getCN(subjectDn)+" - "+getCN(issuerDn)+" - "+x509cert.getNotAfter());
                //certs.put(getCN(subjectDn)+" - "+getCN(issuerDn)+" - "+fecha,x509cert);
                //aliasHash.put(getCN(subjectDn)+" - "+getCN(issuerDn)+" - "+fecha,alias);
                certs.put(String.valueOf(certs.size()),x509cert);
                aliasHash.put(String.valueOf(aliasHash.size()),alias);
            }
            //Inicializo el modelo de la lista de certificados y además inserto los mismos.
            MyTableModel modelo = new MyTableModel();
            modelo.addColumn("Nombre");
            modelo.addColumn("Emisor");
            modelo.addColumn("Fecha de validez");
            for(int i=0;i<elementos.size();i++){
                    modelo.addRow(elementos.get(i));
            }
            //MyTableModel modelo = new MyTableModel(auxElem,new String [] {"Nombre", "Emisor", "Fecha validez"});
            lista.setModel(modelo);
            //Indico que el almacén es el almacén de java
            esJava=true;
        }
        
        
    }
    
    private void cargarCertsToken(){
        List<SofisCertificate> sofisCerts;
        try {
            PKCS11CertStoreImpl tokenStore = new PKCS11CertStoreImpl(PKCS11CertStoreImpl.PKCS11CertStoreType.ETOKEN, userAgent, null);
            storeMg.addCertStore(tokenStore);
            sofisCerts = storeMg.getSignCertificateFromPKCS11("", null, PKCS11CertStoreImpl.PKCS11CertStoreType.ETOKEN);
            if (certs != null && certs.size() > 0) {
            for (SofisCertificate cert : sofisCerts) {
                if (cert.isOk()) {
                    System.out.print("Encontro cert");
                }
            }
         }
        } catch (StoreInvalidPasswordException ex) {
            Logger.getLogger(JavaApplet.class.getName()).log(Level.SEVERE, null, ex);
        } catch (DriverException ex) {
            Logger.getLogger(JavaApplet.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    //Función para obtener el nombre identificado por CN=
    private String getCN(String nombre){
        String[] arreglo;
        arreglo = nombre.split(",");
        for(int i = 0;i<arreglo.length;i++){
            if(arreglo[i].startsWith(" CN=")||arreglo[i].startsWith("CN=")){
                if(arreglo[i].startsWith(" CN="))
                    return arreglo[i].replace(" CN=", "");
                else
                    return arreglo[i].replace("CN=", "");
            }
        }
        return "";
    }

    //Función que me indica si estoy en wondows.
    public static boolean isOSWindows() {
        return (System.getProperty("os.name").toLowerCase().startsWith("win"));
    }

    public static boolean isMac(){
        String os = System.getProperty("os.name").toLowerCase();
	//Mac
        return (os.indexOf( "mac" ) >= 0);
    }
    //Función para devolver la unicidad de alias de los certificados del almacén de windows
    private static void _fixAliases(KeyStore keyStore) {
        Field field;
        KeyStoreSpi keyStoreVeritable;
        try {
            field = keyStore.getClass().getDeclaredField("keyStoreSpi");
            field.setAccessible(true);
            keyStoreVeritable = (KeyStoreSpi)field.get(keyStore);

            if("sun.security.mscapi.KeyStore$MY".equals(keyStoreVeritable.getClass().getName())) {
                Collection entries;
                String alias, hashCode;
                X509Certificate[] certificates;

                field = keyStoreVeritable.getClass().getEnclosingClass().getDeclaredField("entries");
                field.setAccessible(true);
                entries = (Collection)field.get(keyStoreVeritable);

                for(Object entry : entries) {
                    field = entry.getClass().getDeclaredField("certChain");
                    field.setAccessible(true);
                    certificates = (X509Certificate[])field.get(entry);
                    hashCode = Integer.toString(certificates[0].hashCode());

                    field = entry.getClass().getDeclaredField("alias");
                    field.setAccessible(true);
                    alias = (String)field.get(entry);

                    if(!alias.equals(hashCode)) {
                            field.set(entry, alias.concat(" - ").concat(hashCode));
                    } // if
                } // for
            } // if
        } catch(Exception exception) {
                System.err.println(exception);
                exception.printStackTrace();
        } // catch
    } // _fixAliases

    private void igdocKeystore() throws Exception {
        Certificate c;
        String keystoreFilename;
        if(isOSWindows()){
            keystoreFilename = System.getenv("APPDATA").replace("\\", "/")+"/IGDoc/almacenIGDOC";
        }else{
            keystoreFilename = System.getProperty("user.home").replace("\\", "/")+"/.IGDoc/almacenIGDOC";
        }
        if((new File(keystoreFilename)).exists()){
            FileInputStream fIn = new FileInputStream(keystoreFilename);
            keystore = KeyStore.getInstance("JKS");
            keystore.load(fIn,"default".toCharArray());
            fIn.close();
            boolean valido;
            ArrayList<String[]> elementos = new ArrayList();
            String[] elem;
            Enumeration enumer = keystore.aliases();
            SimpleDateFormat simpDate = new SimpleDateFormat("dd/MM/yyyy");
            String fecha;
            //Recorro todos los certificados para insertar los certificados del usuario logueado
            for (; enumer.hasMoreElements(); ) {
                valido = true;
                String alias = (String)enumer.nextElement();
                c = (Certificate) keystore.getCertificate(alias);
                X509Certificate x509cert = (X509Certificate)c;
                Principal nombre = x509cert.getSubjectDN();
                Principal emisor = x509cert.getIssuerDN();
                String issuerDn = emisor.getName();
                try{
                    x509cert.checkValidity();
                } catch (CertificateExpiredException exe) {
                        valido = false;
                } catch (CertificateNotYetValidException exe) {
                    valido = false;
                }
                String subjectDn = nombre.getName();
                if((todosLosUsuarios || getCN(subjectDn).toUpperCase().equals(usuario)) && valido){
                    //Si el certificado es del usuario y además es válido, entonces lo inserto en un HashMap de certificados.
                    fecha= simpDate.format(x509cert.getNotBefore())+"-"+simpDate.format(x509cert.getNotAfter());
                    elem = new String [] {getCN(subjectDn), getCN(issuerDn),fecha};
                    elementos.add(elem);
                    //lista.add(getCN(subjectDn)+" - "+getCN(issuerDn)+" - "+x509cert.getNotAfter());
                    //certs.put(getCN(subjectDn)+" - "+getCN(issuerDn)+" - "+fecha,x509cert);
                    certs.put(String.valueOf(certs.size()),x509cert);
                    //aliasHash.put(getCN(subjectDn)+" - "+getCN(issuerDn)+" - "+fecha,alias);
                    aliasHash.put(String.valueOf(aliasHash.size()),alias);
                }
                //Inicializo el modelo de la lista de certificados y además inserto los mismos.
                MyTableModel modelo = new MyTableModel();
                modelo.addColumn("Nombre");
                modelo.addColumn("Emisor");
                modelo.addColumn("Fecha de validez");
                for(int i=0;i<elementos.size();i++){
                        modelo.addRow(elementos.get(i));
                }
                //MyTableModel modelo = new MyTableModel(auxElem,new String [] {"Nombre", "Emisor", "Fecha validez"});
                lista.setModel(modelo);
                esJava=true;
            }
        }
    }

    //Extension del modelo de la tabla para hacer que las celdas no sean editables.
    public class MyTableModel extends DefaultTableModel{

        @Override
        public boolean isCellEditable(int a, int b) {
                return false;
        }
    }


    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        contenedor = new javax.swing.JPanel();
        passwordError = new javax.swing.JPanel();
        titulo5 = new javax.swing.JLabel();
        pass1 = new javax.swing.JPasswordField();
        okButton2 = new javax.swing.JButton();
        titulo6 = new javax.swing.JLabel();
        titulo7 = new javax.swing.JLabel();
        cancelar = new javax.swing.JButton();
        finalizar = new javax.swing.JPanel();
        titulo3 = new javax.swing.JLabel();
        noCerts = new javax.swing.JPanel();
        titulo2 = new javax.swing.JLabel();
        okButton4 = new javax.swing.JButton();
        password = new javax.swing.JPanel();
        titulo1 = new javax.swing.JLabel();
        pass = new javax.swing.JPasswordField();
        okButton1 = new javax.swing.JButton();
        titulo4 = new javax.swing.JLabel();
        cancelar2 = new javax.swing.JButton();
        principal = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        titulo = new javax.swing.JLabel();
        cancelar3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        lista = new javax.swing.JTable();
        hayError = new javax.swing.JPanel();
        titulo8 = new javax.swing.JLabel();
        okButton3 = new javax.swing.JButton();

        getContentPane().setLayout(new java.awt.GridLayout(1, 1));

        contenedor.setBackground(new java.awt.Color(255, 255, 255));
        contenedor.setPreferredSize(new java.awt.Dimension(484, 169));
        contenedor.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));

        passwordError.setBackground(new java.awt.Color(255, 255, 255));
        passwordError.setMaximumSize(new java.awt.Dimension(484, 169));
        passwordError.setMinimumSize(new java.awt.Dimension(484, 169));
        passwordError.setPreferredSize(new java.awt.Dimension(484, 169));
        passwordError.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        titulo5.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        titulo5.setForeground(new java.awt.Color(0, 118, 196));
        titulo5.setText("Ingrese la contraseña de la clave privada de su certificado.");
        passwordError.add(titulo5, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 20, -1, -1));

        pass1.setMaximumSize(new java.awt.Dimension(104, 20));
        pass1.setMinimumSize(new java.awt.Dimension(104, 20));
        pass1.setPreferredSize(new java.awt.Dimension(104, 20));
        pass1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                pass1KeyReleased(evt);
            }
        });
        passwordError.add(pass1, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 68, -1, -1));

        okButton2.setBackground(new java.awt.Color(245, 244, 244));
        okButton2.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        okButton2.setText("Aceptar");
        okButton2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 102, 204)));
        okButton2.setMaximumSize(new java.awt.Dimension(84, 20));
        okButton2.setMinimumSize(new java.awt.Dimension(84, 20));
        okButton2.setPreferredSize(new java.awt.Dimension(84, 20));
        okButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButton2ActionPerformed(evt);
            }
        });
        passwordError.add(okButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(155, 140, -1, -1));

        titulo6.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        titulo6.setForeground(new java.awt.Color(255, 0, 51));
        titulo6.setText("Contraseña:");
        passwordError.add(titulo6, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 70, -1, -1));

        titulo7.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        titulo7.setForeground(new java.awt.Color(255, 0, 51));
        titulo7.setText("contraseña incorrecta.");
        passwordError.add(titulo7, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 90, -1, -1));

        cancelar.setBackground(new java.awt.Color(245, 244, 244));
        cancelar.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        cancelar.setText("Cancelar");
        cancelar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 102, 204)));
        cancelar.setMaximumSize(new java.awt.Dimension(84, 20));
        cancelar.setMinimumSize(new java.awt.Dimension(84, 20));
        cancelar.setPreferredSize(new java.awt.Dimension(84, 20));
        cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarActionPerformed(evt);
            }
        });
        passwordError.add(cancelar, new org.netbeans.lib.awtextra.AbsoluteConstraints(245, 140, -1, -1));

        contenedor.add(passwordError);

        finalizar.setBackground(new java.awt.Color(255, 255, 255));
        finalizar.setMaximumSize(new java.awt.Dimension(484, 169));
        finalizar.setMinimumSize(new java.awt.Dimension(484, 169));

        titulo3.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        titulo3.setForeground(new java.awt.Color(0, 118, 196));
        titulo3.setText("Espere mientras se procesa su firma..");

        javax.swing.GroupLayout finalizarLayout = new javax.swing.GroupLayout(finalizar);
        finalizar.setLayout(finalizarLayout);
        finalizarLayout.setHorizontalGroup(
            finalizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, finalizarLayout.createSequentialGroup()
                .addGap(122, 122, 122)
                .addComponent(titulo3)
                .addContainerGap(120, Short.MAX_VALUE))
        );
        finalizarLayout.setVerticalGroup(
            finalizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(finalizarLayout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addComponent(titulo3)
                .addContainerGap(81, Short.MAX_VALUE))
        );

        contenedor.add(finalizar);

        noCerts.setBackground(new java.awt.Color(255, 255, 255));
        noCerts.setMaximumSize(new java.awt.Dimension(484, 169));
        noCerts.setMinimumSize(new java.awt.Dimension(484, 169));

        titulo2.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        titulo2.setForeground(new java.awt.Color(0, 118, 196));
        titulo2.setText("Usted no tiene ningún certificado instalado.");

        okButton4.setBackground(new java.awt.Color(245, 244, 244));
        okButton4.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        okButton4.setText("Aceptar");
        okButton4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 102, 204)));
        okButton4.setMaximumSize(new java.awt.Dimension(84, 20));
        okButton4.setMinimumSize(new java.awt.Dimension(84, 20));
        okButton4.setPreferredSize(new java.awt.Dimension(84, 20));
        okButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout noCertsLayout = new javax.swing.GroupLayout(noCerts);
        noCerts.setLayout(noCertsLayout);
        noCertsLayout.setHorizontalGroup(
            noCertsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(noCertsLayout.createSequentialGroup()
                .addGroup(noCertsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(noCertsLayout.createSequentialGroup()
                        .addGap(127, 127, 127)
                        .addComponent(titulo2))
                    .addGroup(noCertsLayout.createSequentialGroup()
                        .addGap(206, 206, 206)
                        .addComponent(okButton4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(119, Short.MAX_VALUE))
        );
        noCertsLayout.setVerticalGroup(
            noCertsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(noCertsLayout.createSequentialGroup()
                .addGap(72, 72, 72)
                .addComponent(titulo2)
                .addGap(52, 52, 52)
                .addComponent(okButton4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        contenedor.add(noCerts);

        password.setBackground(new java.awt.Color(255, 255, 255));
        password.setMaximumSize(new java.awt.Dimension(484, 169));
        password.setMinimumSize(new java.awt.Dimension(484, 169));
        password.setPreferredSize(new java.awt.Dimension(484, 169));
        password.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        titulo1.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        titulo1.setForeground(new java.awt.Color(0, 118, 196));
        titulo1.setText("Ingrese la contraseña de la clave privada de su certificado.");
        password.add(titulo1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 20, -1, -1));

        pass.setMaximumSize(new java.awt.Dimension(104, 20));
        pass.setMinimumSize(new java.awt.Dimension(104, 20));
        pass.setPreferredSize(new java.awt.Dimension(104, 20));
        pass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passActionPerformed(evt);
            }
        });
        pass.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                passKeyReleased(evt);
            }
        });
        password.add(pass, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 68, -1, -1));

        okButton1.setBackground(new java.awt.Color(245, 244, 244));
        okButton1.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        okButton1.setText("Aceptar");
        okButton1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 102, 204)));
        okButton1.setMaximumSize(new java.awt.Dimension(84, 20));
        okButton1.setMinimumSize(new java.awt.Dimension(84, 20));
        okButton1.setPreferredSize(new java.awt.Dimension(84, 20));
        okButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButton1ActionPerformed(evt);
            }
        });
        password.add(okButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(155, 140, -1, -1));

        titulo4.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        titulo4.setForeground(new java.awt.Color(0, 118, 196));
        titulo4.setText("Contraseña:");
        password.add(titulo4, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 70, -1, -1));

        cancelar2.setBackground(new java.awt.Color(245, 244, 244));
        cancelar2.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        cancelar2.setText("Cancelar");
        cancelar2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 102, 204)));
        cancelar2.setMaximumSize(new java.awt.Dimension(84, 20));
        cancelar2.setMinimumSize(new java.awt.Dimension(84, 20));
        cancelar2.setPreferredSize(new java.awt.Dimension(84, 20));
        cancelar2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelar2ActionPerformed(evt);
            }
        });
        password.add(cancelar2, new org.netbeans.lib.awtextra.AbsoluteConstraints(245, 140, -1, -1));

        contenedor.add(password);

        principal.setBackground(new java.awt.Color(255, 255, 255));
        principal.setMaximumSize(new java.awt.Dimension(484, 169));
        principal.setMinimumSize(new java.awt.Dimension(484, 169));
        principal.setPreferredSize(new java.awt.Dimension(484, 169));
        principal.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        okButton.setBackground(new java.awt.Color(245, 244, 244));
        okButton.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        okButton.setText("Aceptar");
        okButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 102, 204)));
        okButton.setMaximumSize(new java.awt.Dimension(84, 20));
        okButton.setMinimumSize(new java.awt.Dimension(84, 20));
        okButton.setPreferredSize(new java.awt.Dimension(84, 20));
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        principal.add(okButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(155, 140, 84, 20));

        titulo.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        titulo.setForeground(new java.awt.Color(0, 118, 196));
        titulo.setText("Seleccione el certificado con el que desea firmar.");
        principal.add(titulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 20, -1, -1));

        cancelar3.setBackground(new java.awt.Color(245, 244, 244));
        cancelar3.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        cancelar3.setText("Cancelar");
        cancelar3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 102, 204)));
        cancelar3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelar3ActionPerformed(evt);
            }
        });
        principal.add(cancelar3, new org.netbeans.lib.awtextra.AbsoluteConstraints(245, 140, 84, 20));

        lista.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        lista.setForeground(new java.awt.Color(0, 102, 204));
        lista.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Emisor", "Fecha validez"
            }
        ));
        lista.setGridColor(new java.awt.Color(0, 102, 255));
        lista.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lista.setShowVerticalLines(false);
        jScrollPane1.setViewportView(lista);

        principal.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(16, 40, 452, 90));

        contenedor.add(principal);

        hayError.setBackground(new java.awt.Color(255, 255, 255));
        hayError.setMaximumSize(new java.awt.Dimension(484, 169));
        hayError.setMinimumSize(new java.awt.Dimension(484, 169));
        hayError.setPreferredSize(new java.awt.Dimension(484, 169));

        titulo8.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        titulo8.setForeground(new java.awt.Color(255, 0, 51));
        titulo8.setText("Ha ocurrido un error y no se ha podido firmar el documento.");

        okButton3.setBackground(new java.awt.Color(245, 244, 244));
        okButton3.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        okButton3.setText("Aceptar");
        okButton3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 102, 204)));
        okButton3.setMaximumSize(new java.awt.Dimension(84, 20));
        okButton3.setMinimumSize(new java.awt.Dimension(84, 20));
        okButton3.setPreferredSize(new java.awt.Dimension(84, 20));
        okButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout hayErrorLayout = new javax.swing.GroupLayout(hayError);
        hayError.setLayout(hayErrorLayout);
        hayErrorLayout.setHorizontalGroup(
            hayErrorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hayErrorLayout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addComponent(titulo8))
            .addGroup(hayErrorLayout.createSequentialGroup()
                .addGap(210, 210, 210)
                .addComponent(okButton3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        hayErrorLayout.setVerticalGroup(
            hayErrorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hayErrorLayout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addComponent(titulo8)
                .addGap(56, 56, 56)
                .addComponent(okButton3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        contenedor.add(hayError);

        getContentPane().add(contenedor);
    }// </editor-fold>//GEN-END:initComponents

    //Acción del botón aceptar luego de seleccionar un certificado
    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        //seleccionado = lista.getSelectedItem();
        //Obtengo el certificado seleccionado.
        //seleccionado = lista.getModel().getValueAt(lista.getSelectedRow(), 0)+" - "+lista.getModel().getValueAt(lista.getSelectedRow(), 1)+" - "+lista.getModel().getValueAt(lista.getSelectedRow(), 2);
        seleccionado = String.valueOf(lista.getSelectedRow());
        if(esJava){
            //Si estoy en java muestro el panel para ingresar la contraseña.
            principal.setVisible(false);
            noCerts.setVisible(false);
            password.setVisible(true);
            pass.setText("");
            pass.requestFocus();
            finalizar.setVisible(false);
            passwordError.setVisible(false);
            hayError.setVisible(false);
        }else{
            //Si estoy en wondows, se no necesito ingresar contraseña ya que windows cryptoAPI se encarga de esto.
            contra=null;
            //Genero la firma
            firmar();
            if(error==1){
                //Ingresé el password incorrecto. Muestro el panel que informa y permite reingresarlo.
                principal.setVisible(false);
                noCerts.setVisible(false);
                password.setVisible(false);
                finalizar.setVisible(false);
                passwordError.setVisible(true);
                hayError.setVisible(false);
            }else if(error==2){
                //Hubo error. Muestro el panel que informa.
                principal.setVisible(false);
                noCerts.setVisible(false);
                password.setVisible(false);
                finalizar.setVisible(false);
                passwordError.setVisible(false);
                hayError.setVisible(true);
            }
            else{
                //Se firmó correctamente. Muestro el panel que informa.
                principal.setVisible(false);
                noCerts.setVisible(false);
                password.setVisible(false);
                finalizar.setVisible(true);
                passwordError.setVisible(false);
                hayError.setVisible(false);
            }
        }
}//GEN-LAST:event_okButtonActionPerformed

    //Acción del botón aceptar luego de ingresar la contraseña
    private void okButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButton1ActionPerformed
        contra = pass.getPassword();
        //Obtengo el password y genero la firma
        firmar();
        if(error==1){
            //Ingresé el password incorrecto. Muestro el panel que informa y permite reingresarlo.
            principal.setVisible(false);
            noCerts.setVisible(false);
            password.setVisible(false);
            passwordError.setVisible(true);
            pass1.requestFocus();
            finalizar.setVisible(false);
            hayError.setVisible(false);
        }else if(error==2){
            //Hubo error. Muestro el panel que informa.
            principal.setVisible(false);
            noCerts.setVisible(false);
            password.setVisible(false);
            finalizar.setVisible(false);
            passwordError.setVisible(false);
            hayError.setVisible(true);
        }else{
            //Se firmó correctamente. Muestro el panel que informa.
            principal.setVisible(false);
            noCerts.setVisible(false);
            password.setVisible(false);
            finalizar.setVisible(true);
            passwordError.setVisible(false);
            hayError.setVisible(false);
        }
}//GEN-LAST:event_okButton1ActionPerformed

    //Acción del botón aceptar luego de ingresar la contraseña nuevamente
    private void okButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButton2ActionPerformed
        contra = pass1.getPassword();
        //Obtengo el password y genero la firma
        firmar();
        if(error==1){
            //Ingresé el password incorrecto. Muestro el panel que informa y permite reingresarlo.
            principal.setVisible(false);
            noCerts.setVisible(false);
            password.setVisible(false);
            passwordError.setVisible(true);
            pass1.setText("");
            pass1.requestFocus();
            finalizar.setVisible(false);
            hayError.setVisible(false);
        }
        else if(error==2){
            //Hubo error. Muestro el panel que informa.
            principal.setVisible(false);
            noCerts.setVisible(false);
            password.setVisible(false);
            finalizar.setVisible(false);
            passwordError.setVisible(false);
            hayError.setVisible(true);
        }else{
            //Se firmó correctamente. Muestro el panel que informa.
            principal.setVisible(false);
            noCerts.setVisible(false);
            password.setVisible(false);
            finalizar.setVisible(true);
            passwordError.setVisible(false);
            hayError.setVisible(false);
        }
    }//GEN-LAST:event_okButton2ActionPerformed

    //Botón cancelar
    private void cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarActionPerformed
        lista.removeAll();
        init();
        JSObject win = (JSObject) JSObject.getWindow(this);
        win.call("ocultarApplet", new String[]{subform});
}//GEN-LAST:event_cancelarActionPerformed

    //Botón cancelar
    private void cancelar2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelar2ActionPerformed
        lista.removeAll();
        init();
        JSObject win = (JSObject) JSObject.getWindow(this);
        win.call("ocultarApplet", new String[]{subform});
}//GEN-LAST:event_cancelar2ActionPerformed

    private void passActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_passActionPerformed

    //Botón cancelar
    private void cancelar3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelar3ActionPerformed
        lista.removeAll();
        init();
        JSObject win = (JSObject) JSObject.getWindow(this);
        win.call("ocultarApplet", new String[]{subform});
}//GEN-LAST:event_cancelar3ActionPerformed

    //Botón Ok
    private void okButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButton3ActionPerformed
        lista.removeAll();
        init();
        JSObject win = (JSObject) JSObject.getWindow(this);
        win.call("ocultarApplet", new String[]{subform});
    }//GEN-LAST:event_okButton3ActionPerformed

    //Botón Ok
    private void okButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButton4ActionPerformed
        lista.removeAll();
        init();
        JSObject win = (JSObject) JSObject.getWindow(this);
        win.call("ocultarApplet", new String[]{subform});
    }//GEN-LAST:event_okButton4ActionPerformed

    private void pass1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pass1KeyReleased
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            contra = pass1.getPassword();
            //Obtengo el password y genero la firma
            firmar();
            if (error == 1) {
                //Ingresé el password incorrecto. Muestro el panel que informa y permite reingresarlo.
                principal.setVisible(false);
                noCerts.setVisible(false);
                password.setVisible(false);
                passwordError.setVisible(true);
                pass1.setText("");
                pass1.requestFocus();
                finalizar.setVisible(false);
                hayError.setVisible(false);
            } else if (error == 2) {
                //Hubo error. Muestro el panel que informa.
                principal.setVisible(false);
                noCerts.setVisible(false);
                password.setVisible(false);
                finalizar.setVisible(false);
                passwordError.setVisible(false);
                hayError.setVisible(true);
            } else {
                //Se firmó correctamente. Muestro el panel que informa.
                principal.setVisible(false);
                noCerts.setVisible(false);
                password.setVisible(false);
                finalizar.setVisible(true);
                passwordError.setVisible(false);
                hayError.setVisible(false);
            }
        }
    }//GEN-LAST:event_pass1KeyReleased

    private void passKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_passKeyReleased
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            contra = pass.getPassword();
            //Obtengo el password y genero la firma
            firmar();
            if (error == 1) {
                //Ingresé el password incorrecto. Muestro el panel que informa y permite reingresarlo.
                principal.setVisible(false);
                noCerts.setVisible(false);
                password.setVisible(false);
                passwordError.setVisible(true);
                pass1.setText("");
                pass1.requestFocus();
                finalizar.setVisible(false);
                hayError.setVisible(false);
            } else if (error == 2) {
                //Hubo error. Muestro el panel que informa.
                principal.setVisible(false);
                noCerts.setVisible(false);
                password.setVisible(false);
                finalizar.setVisible(false);
                passwordError.setVisible(false);
                hayError.setVisible(true);
            } else {
                //Se firmó correctamente. Muestro el panel que informa.
                principal.setVisible(false);
                noCerts.setVisible(false);
                password.setVisible(false);
                finalizar.setVisible(true);
                passwordError.setVisible(false);
                hayError.setVisible(false);
            }
        }
    }//GEN-LAST:event_passKeyReleased

    public String getFirma(){
        return firma;
    }

    private void firmar(){
        error=1;
        String alias = (String) aliasHash.get(seleccionado);
        X509Certificate certificado =  (X509Certificate) certs.get(seleccionado);
        PrivateKey ky;
        try {
            if (esJava){
                ky = (PrivateKey) keystore.getKey(alias, contra);
            }else{
                ky = (PrivateKey) keystore.getKey(alias, null);
            }
            //Instancio el generador de firmas y le agrego la clave privada para firmar
            CMSSignedDataGenerator generator;
            generator = new CMSSignedDataGenerator();

            generator.addSigner(ky, certificado, CMSSignedDataGenerator.DIGEST_SHA1);

            ArrayList list = new ArrayList();
            list.add(certificado);

            // Agregamos la cadena certificados
            CertStore chainStore;
            try {
                chainStore = CertStore.getInstance("Collection", new CollectionCertStoreParameters(list), "BC");
                try {
                    generator.addCertificatesAndCRLs(chainStore);
                     // Obtengo el hash a firmar a partir del documento

                    // instanciamos un CMSProcessable con el hash obtenido
                    CMSProcessable content;
                    try {
                        content = new CMSProcessableByteArray(hash.getBytes("UnicodeLittleUnmarked"));
                        // Generamos la firma
                        CMSSignedData signedData;
                        if(esJava){
                            signedData = generator.generate(content, true, "BC");
                        }else{
                            signedData = generator.generate(content, true, keystore.getProvider());
                        }

                        // Traducimos la firma a Base 64
                        byte[] pk;
                        try {
                            pk = Base64.encode(signedData.getEncoded());
                            // Pasamos el Base64 a un String
                            String p="";
                            for (int i=0;i<pk.length;i++){
                                p=p+(char)pk[i];
                            }
                            error=0;
                            firma=p;
                            JSObject win = (JSObject) JSObject.getWindow(this);
                            
                            win.call("appletFirmarJava", new String[]{p, alias, subform, firmaParaBorrar+""});
                            
                        } catch (IOException ex) {
                            Logger.getLogger(JavaApplet.class.getName()).log(Level.SEVERE, null, ex);
                            error=2;
                        }


                    } catch (UnsupportedEncodingException ex) {
                        Logger.getLogger(JavaApplet.class.getName()).log(Level.SEVERE, null, ex);
                        error=2;
                    }

                } catch (CertStoreException ex) {
                    Logger.getLogger(JavaApplet.class.getName()).log(Level.SEVERE, null, ex);
                    error=2;
                } catch (CMSException ex) {
                    Logger.getLogger(JavaApplet.class.getName()).log(Level.SEVERE, null, ex);
                    error=2;
                }

            } catch (InvalidAlgorithmParameterException ex) {
                Logger.getLogger(JavaApplet.class.getName()).log(Level.SEVERE, null, ex);
                error=2;
            } catch (NoSuchProviderException ex) {
                Logger.getLogger(JavaApplet.class.getName()).log(Level.SEVERE, null, ex);
                error=2;
            } catch (IllegalArgumentException ex) {
                Logger.getLogger(JavaApplet.class.getName()).log(Level.SEVERE, null, ex);
                error=2;
            }


        } catch (KeyStoreException ex) {
            Logger.getLogger(JavaApplet.class.getName()).log(Level.SEVERE, null, ex);
            error=2;
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(JavaApplet.class.getName()).log(Level.SEVERE, null, ex);
            error=2;
        } catch (UnrecoverableKeyException ex) {
            Logger.getLogger(JavaApplet.class.getName()).log(Level.SEVERE, null, ex);
            error=1;
        } catch (Exception ex) {
            Logger.getLogger(JavaApplet.class.getName()).log(Level.SEVERE, null, ex);
            error=2;
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelar;
    private javax.swing.JButton cancelar2;
    private javax.swing.JButton cancelar3;
    private javax.swing.JPanel contenedor;
    private javax.swing.JPanel finalizar;
    private javax.swing.JPanel hayError;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable lista;
    private javax.swing.JPanel noCerts;
    private javax.swing.JButton okButton;
    private javax.swing.JButton okButton1;
    private javax.swing.JButton okButton2;
    private javax.swing.JButton okButton3;
    private javax.swing.JButton okButton4;
    private javax.swing.JPasswordField pass;
    private javax.swing.JPasswordField pass1;
    private javax.swing.JPanel password;
    private javax.swing.JPanel passwordError;
    private javax.swing.JPanel principal;
    private javax.swing.JLabel titulo;
    private javax.swing.JLabel titulo1;
    private javax.swing.JLabel titulo2;
    private javax.swing.JLabel titulo3;
    private javax.swing.JLabel titulo4;
    private javax.swing.JLabel titulo5;
    private javax.swing.JLabel titulo6;
    private javax.swing.JLabel titulo7;
    private javax.swing.JLabel titulo8;
    // End of variables declaration//GEN-END:variables

}
