/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package uy.com.isaltda.tokens.store;

import java.io.*;
import java.net.URL;
import java.security.KeyStore;
import java.security.Provider;
import java.security.Provider.Service;
import java.security.ProviderException;
import java.security.Security;
import java.security.UnrecoverableKeyException;
import java.security.cert.X509Certificate;
import java.util.Enumeration;
import javax.security.auth.callback.Callback;
import javax.security.auth.callback.CallbackHandler;
import javax.security.auth.callback.UnsupportedCallbackException;
import javax.security.auth.login.FailedLoginException;
import nl.bitwalker.useragentutils.OperatingSystem;
import nl.bitwalker.useragentutils.UserAgent;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import sun.security.pkcs11.SunPKCS11;
import uy.com.isaltda.tokens.aladdin.AlladinConfigFile;
import uy.com.isaltda.tokens.ePass2003.EPass2003ConfigFile;
import uy.com.isaltda.tokens.ePass2003Auto.EPass3003AutoConfigFile;
import uy.com.isaltda.tokens.store.exception.DriverException;
import uy.com.isaltda.tokens.store.exception.StoreInvalidPasswordException;
import uy.com.isaltda.tokens.util.ConfigurationUtil;
import uy.com.isaltda.tokens.util.Constantes;
import uy.com.isaltda.tokens.util.MessagesUtil;

/**
 *
 * @author sofis solutions
 */
public class PKCS11Util {
    
    MessagesUtil msgUtil;
    ConfigurationUtil cfgUtil;
    
    public PKCS11Util(ConfigurationUtil cfgUtil,MessagesUtil msgUtil){
        this.msgUtil = msgUtil;
        this.cfgUtil = cfgUtil;
    }
    
//     public PKCS11Util(){
//         
//     }
     
     
    //utilizado para cuando el usuario indica la ruta
    public void createConfigFile(String path, String modelo, UserAgent userAgent) throws IOException {
        String property = "java.io.tmpdir";
        String tempDir = System.getProperty(property);
        String pathSeparator = System.getProperty("file.separator");
        if (!tempDir.endsWith(pathSeparator)){
            tempDir = tempDir + pathSeparator;
        }
        
        String configFilePath;
        String name;

        //bk archivo si existe y crearlo con los datos proporcionados
        
        if (modelo.contains(Constantes.MODELO_ALADDIN)){
            configFilePath = tempDir + "aladdin.cfg";
            File f = new File(configFilePath);
            if (f.exists()){
                f.renameTo(new File(tempDir + "aladdin.cfg.bk"));
            }
            f.createNewFile();
            name = "aladdin";
            
            writeFile(f, name, path, userAgent.getOperatingSystem().equals(OperatingSystem.WINDOWS_7), "2");
            
        }
            
            
       
        if (modelo.contains(Constantes.MODELO_EPASS2003)){
            configFilePath = tempDir + "epass2003.cfg";
            File f = new File(configFilePath);
            if (f.exists()){
                f.renameTo(new File(tempDir + "epass2003.cfg.bk"));
            }
            f.createNewFile();
            name = "epass2003";
            writeFile(f, name, path, false, "");
            
        }
        
        if (modelo.contains(Constantes.MODELO_EPASS3003AUTO)){
            configFilePath = tempDir + "epass3003auto.cfg";
            File f = new File(configFilePath);
            if (f.exists()){
                f.renameTo(new File(tempDir + "epass3003auto.cfg.bk"));
            }
            f.createNewFile();
            name = "epass3003auto";
            writeFile(f, name, path, false, "");
        }
        
        if (modelo.equals(Constantes.MODELO_OTRO)){
            
            int i = 1;
            File f;
            do{
                configFilePath = tempDir + "eToken"+i+".cfg";
                f = new File(configFilePath);
                name = "eToken"+i;
                i++;
                
            }while(f.exists());
            
            f.createNewFile();
            writeFile(f, name, path, false, "");
        }
    }
    
    private void writeFile(File f, String name, String lib, boolean slot, String slotId) throws IOException{
        
        BufferedWriter out = new BufferedWriter(new FileWriter(f));
        out.write("name = "+name);
        out.newLine();
        out.write("library= " + lib);
        out.newLine();
        if (slot){
            out.write("slot= "+slotId);
            out.newLine();
        }
        out.close();
        
        
    }
    
    public String loadETokenLib(String model, UserAgent userAgent){
        
        if (userAgent.getOperatingSystem().getGroup().equals(OperatingSystem.WINDOWS)) {
            
            if (model.contains(Constantes.MODELO_ALADDIN)){
                return cfgUtil.getValue("LIB_ALADDIN_WIN");
            }
            
            if (model.contains(Constantes.MODELO_EPASS2003)){
                return cfgUtil.getValue("LIB_EPASS2003_WIN");
            }
            
            if (model.contains(Constantes.MODELO_EPASS3003AUTO)){
                return cfgUtil.getValue("LIB_EPASS3003_WIN");
            }
            
        }
        
        if (userAgent.getOperatingSystem().getGroup().equals(OperatingSystem.LINUX)) {
            
            if (model.contains(Constantes.MODELO_ALADDIN)){
                return cfgUtil.getValue("LIB_ALADDIN_LIN");
            }
            
            if (model.contains(Constantes.MODELO_EPASS2003)){
                return cfgUtil.getValue("LIB_EPASS2003_LIN");
            }
            
            if (model.contains(Constantes.MODELO_EPASS3003AUTO)){
                return cfgUtil.getValue("LIB_EPASS3003_LIN");
            }
            
        }
        
        //MAC
        
        if (model.contains(Constantes.MODELO_ALADDIN)){
            return cfgUtil.getValue("LIB_ALADDIN_MAC");
        }

        if (model.contains(Constantes.MODELO_EPASS2003)){
            return cfgUtil.getValue("LIB_EPASS2003_MAC");
        }

        if (model.contains(Constantes.MODELO_EPASS3003AUTO)){
            return cfgUtil.getValue("LIB_EPASS3003_MAC");
        }
        
        return "";
        
        
        
    }
     
    /**
     * Carga en memoria el KeysStore que se corresponde con el TOKEN
     * etokenConfNombre
     *
     * @param ksPass
     * @param etokenConfNombre
     * @return
     * @throws java.lang.Exception
     */
    public KeyStore loadTokenKeyStore(String ksPass, UserAgent userAgent) throws Exception {
        
        String property = "java.io.tmpdir";
        String tempDir = System.getProperty(property);
        String pathSeparator = System.getProperty("file.separator");
        if (!tempDir.endsWith(pathSeparator)){
            tempDir = tempDir + pathSeparator;
        }
        
        
        
        /********************************************************/
        
        //otro
        
        int i = 1;
        File eTokenConf;
        String name;
        SunPKCS11 sunPKCS11eToken = null;
        String configFilePath;
        boolean hayMod = false;
        do{
            configFilePath = tempDir + "eToken"+i+".cfg";
            eTokenConf = new File(configFilePath);
            name = "eToken"+i;
            
            
            
            if (eTokenConf.exists()){
                
                Security.removeProvider("SunPKCS11-"+name);
        
                if (Security.getProvider("SunPKCS11-"+name) == null) {
                    //BUG win XP se usa la canonica
                    String path = null;
                    try {
                        path = eTokenConf.getCanonicalPath();
                    } catch (Exception w) {
                        path = eTokenConf.getPath();
                    }

                    try{
                        sunPKCS11eToken = new sun.security.pkcs11.SunPKCS11(path);
                        Security.addProvider(sunPKCS11eToken);
                    }catch(ProviderException pe){
                        sunPKCS11eToken = null;
                        pe.printStackTrace();
                    }

                } else {
                    sunPKCS11eToken = (SunPKCS11) Security.getProvider("SunPKCS11-"+name);
                }
                
                if (sunPKCS11eToken!=null){

                    hayMod = true;
                    Provider prov = Security.getProvider("SunPKCS11-"+name);
                    System.out.println("prov "+name+": "+prov);
                    if (!prov.getServices().isEmpty()) {
                        System.out.println("conectado");
                        //conectado
                        KeyStore keyStore = null;
                        try {
                            keyStore = KeyStore.getInstance("PKCS11", prov);
                            keyStore.load(null,ksPass.toCharArray());
                        } catch (Exception ioEx) {
                            if (ioEx.getCause() instanceof UnrecoverableKeyException || ioEx.getCause() instanceof FailedLoginException) {
                                throw new StoreInvalidPasswordException(msgUtil.getValue("MSG_CONTRASENIA_INVALIDA"));
                            }
                            ioEx.printStackTrace();
                        }
                        return keyStore;
                    }
                }
            }
            i++;

        }while(eTokenConf.exists());
        
        
        
        
        
        /********************************************************/
        
        

        //crea el archivos de configuracion si es necesario.
        
        //aladdin
        AlladinConfigFile f = new AlladinConfigFile(cfgUtil);
        configFilePath = tempDir + "aladdin.cfg";
        f.createConfigFile("/", userAgent);
        File aladdinConf = new File(configFilePath);
        
        //epass2003
        EPass2003ConfigFile fepass = new EPass2003ConfigFile(cfgUtil);
        configFilePath = tempDir + "epass2003.cfg";
        fepass.createConfigFile("/", userAgent);
        File epass2003Conf = new File(configFilePath);
        
//        //epass3003auto
//        EPass3003AutoConfigFile fepass3 = new EPass3003AutoConfigFile(cfgUtil);
//        configFilePath = tempDir + "epass3003auto.cfg";
//        fepass3.createConfigFile("/", userAgent);
//        File epass3003Conf = new File(configFilePath);
        
        
        
        Security.removeProvider("SunPKCS11-aladdin");
        Security.removeProvider("SunPKCS11-epass2003");
        Security.removeProvider("SunPKCS11-epass3003auto");
        
        
        //aladdin
        SunPKCS11 sunPKCS11 = null;
        if (aladdinConf.length() != 0L){
            if (Security.getProvider("SunPKCS11-aladdin") == null) {
                //BUG win XP se usa la canonica
                String path = null;
                try {
                    path = aladdinConf.getCanonicalPath();
                } catch (Exception w) {
                    path = aladdinConf.getPath();
                }
                try{
                    sunPKCS11 = new sun.security.pkcs11.SunPKCS11(path);
                    Security.addProvider(sunPKCS11);
                }catch(ProviderException pe){
                    sunPKCS11 = null;
                    pe.printStackTrace();
                }

            } else {
                sunPKCS11 = (SunPKCS11) Security.getProvider("SunPKCS11-aladdin");
            }
        }
        
        //epass2003
        SunPKCS11 sunPKCS11epass2003 = null;
        if (epass2003Conf.length() != 0L){
        
            if (Security.getProvider("SunPKCS11-epass2003") == null) {
                //BUG win XP se usa la canonica
                String path = null;
                try {
                    path = epass2003Conf.getCanonicalPath();
                } catch (Exception w) {
                    path = epass2003Conf.getPath();
                }

                try{
                    sunPKCS11epass2003 = new sun.security.pkcs11.SunPKCS11(path);
                    Security.addProvider(sunPKCS11epass2003);
                }catch(ProviderException pe){
                    sunPKCS11epass2003 = null;
                    pe.printStackTrace();
                }

            } else {
                sunPKCS11epass2003 = (SunPKCS11) Security.getProvider("SunPKCS11-epass2003");
            }
        }
        
        //epass3003auto
//        SunPKCS11 sunPKCS11epass3003auto = null;
//        if (epass3003Conf.length() != 0L){
//            
//            if (Security.getProvider("SunPKCS11-epass3003auto") == null) {
//                //BUG win XP se usa la canonica
//                String path = null;
//                try {
//                    path = epass3003Conf.getCanonicalPath();
//                } catch (Exception w) {
//                    path = epass3003Conf.getPath();
//                }
//                try{
//                    sunPKCS11epass3003auto = new sun.security.pkcs11.SunPKCS11(path);
//                    Security.addProvider(sunPKCS11epass3003auto);
//                }catch(ProviderException pe){
//                    sunPKCS11epass3003auto = null;
//                    pe.printStackTrace();
//                }
//
//            } else {
//                sunPKCS11epass3003auto = (SunPKCS11) Security.getProvider("SunPKCS11-epass3003auto");
//            }
//        }
        
        
        
        
//        if ((!hayMod) && (sunPKCS11 == null) && (sunPKCS11epass2003 == null) && (sunPKCS11epass3003auto == null)) {
//            throw new DriverException("No se han encontrado modelos instalados de eToken");
//        }
        
        
        KeyStore keyStore = null;
        Provider prov = null;
        Provider provConect = null;
        if (sunPKCS11!=null){
            
            prov = Security.getProvider("SunPKCS11-aladdin");
            System.out.println("prov aladdin: "+prov);
            if (!prov.getServices().isEmpty()) {
                provConect = prov;
            }
        }
        
        if (sunPKCS11epass2003!=null){

            prov = Security.getProvider("SunPKCS11-epass2003");
            System.out.println("prov epass2003: "+prov);
            if (!prov.getServices().isEmpty()) {
                provConect = prov;
            }
        }
        
//        if (sunPKCS11epass3003auto!=null){
//
//            prov = Security.getProvider("SunPKCS11-epass3003auto");
//            System.out.println("prov epass3003auto: "+prov);
//            if (!prov.getServices().isEmpty()) {
//                provConect = prov;
//            }
//        }
//        
        if (provConect == null){
            //throw new StoreException("No se detecta el eToken");
            throw new DriverException("No se han encontrado modelos instalados de eToken");
        }
        
        
        
        try {
            keyStore = KeyStore.getInstance("PKCS11", provConect);
            keyStore.load(null,ksPass.toCharArray());
        } catch (Exception ioEx) {
            if (ioEx.getCause() instanceof UnrecoverableKeyException || ioEx.getCause() instanceof FailedLoginException) {
                throw new StoreInvalidPasswordException(msgUtil.getValue("MSG_CONTRASENIA_INVALIDA"));
            }
            ioEx.printStackTrace();
        }
        return keyStore;
    }

    /**
     * Carga en memoria el Keystore  con el path del certificado
     *
     * @param ksPass
     * @param pathKeystore
     * @return
     * @throws java.lang.Exception
     */
    public KeyStore loadJKSKeyStore(String ksPass, String pathKeystore) throws Exception {
        File f = new File(pathKeystore);
        InputStream inStream = new FileInputStream(f);
        KeyStore keyStore = KeyStore.getInstance("PKCS12");
        keyStore.load(inStream, ksPass.toCharArray());
        return keyStore;
    }

    /**
     * Busca un archivo con el nombre especificado en todos los directorios raiz
     * del sistema (en Windows, estos son C:\, D:\, etc, en linux solo /). Una
     * vez obtenido el archivo, el metodo getPath() permite obtener la ruta
     * completa al mismo.
     *
     * @param nombre Nombre exacto (case sensitive) del archivo buscado
     */
    public File buscarArchivoConfiguracion(String nombre) {
        File[] roots = File.listRoots();
        File etokenConfig = null;
        if (roots != null) {
            FilenameFilter filter = new SofisFilenameFilter(nombre);
            int i = 0;
            while (i < roots.length && etokenConfig == null) {
                File[] files = roots[i].listFiles(filter);
                if (files != null && files.length > 0) {
                    etokenConfig = files[0];
                }
                i++;
            }
        }
        return etokenConfig;
    }
    
    class MyCallbackHandler implements CallbackHandler {

        public void handle(Callback[] callbacks) throws IOException,
                UnsupportedCallbackException {
            //do nothig, the driver login implementation is invoked
        }
    }

    /**
     * Clase que permite realizar la busqueda de archivos en los directorios
     * raiz del sistema (en Windows, estos son C:\, D:\, etc, en linux solo /).
     */
    private class SofisFilenameFilter implements FilenameFilter {

        String nombre = null;

        public SofisFilenameFilter(String nombre) {
            if (nombre != null) {
                this.nombre = nombre;
            }
        }

        public boolean accept(File dir, String name) {
            return nombre != null && nombre.equals(name);
        }
    }
    
    
    public static void main(String[] args) {
         try{
            
                /*for (Provider p: Security.getProviders()){
                    System.out.println("PROV " + p.getName());
                }
                
                Security.removeProvider("SunPKCS11-epass2003");
                Security.removeProvider("SunPKCS11-aladdin");
                Security.removeProvider("SunPKCS11-epass3003auto");
                
                PKCS11Util util = new PKCS11Util();
                File tokenFiles = util.buscarArchivoConfiguracion("tokenFiles");
                
                System.out.println(tokenFiles.getPath());
                
                
                for (File f: tokenFiles.listFiles()){
                    
                    String name = f.getName().substring(0, f.getName().indexOf('.'));
                    
                    
                    
                    SunPKCS11 sunPKCS11 = new sun.security.pkcs11.SunPKCS11(f.getPath());
                    
                    Security.addProvider(sunPKCS11);
                    
                    sunPKCS11 = (SunPKCS11) Security.getProvider("SunPKCS11-"+name);
                
                    System.out.println("SUN sunPKCS11 " + sunPKCS11);
                    
                    Provider prov = Security.getProvider("SunPKCS11-"+name);
                    if (prov.getServices().isEmpty()) {
                        System.out.println("No se detecta el etoken");
                    }else{
                        //esta conectado
                        KeyStore keyStore = KeyStore.getInstance("PKCS11");
                        String providerName = keyStore.getProvider().getName();
                        System.out.println(providerName +" cargado!");
                    }

                }*/
             
                
                
                
                /*SunPKCS11 sunPKCS11 = new sun.security.pkcs11.SunPKCS11("C:/.conf");
                Security.addProvider(sunPKCS11);
                sunPKCS11 = (SunPKCS11) Security.getProvider("SunPKCS11-epass");
                
                System.out.println("SUN sunPKCS11 " + sunPKCS11);
                
                sunPKCS11 = (SunPKCS11) Security.getProvider("SunPKCS11-Token");
                
                System.out.println("SUN sunPKCS11 " + sunPKCS11);
                
                
                for (Provider p: Security.getProviders()){
                    System.out.println("PROV " + p.getName());
                }
                
                Provider prov = Security.getProvider("SunPKCS11-epass");*/
                
                
//                System.out.println("KEY SET " + prov.keySet().size());
//                for (Object o: prov.keySet()){
//                System.out.println("KEY SET " +o  + " -- " + prov.getProperty(o.toString()));
//                    
//                }
//                Enumeration e = prov.elements();
//                while (e.hasMoreElements()){
//                    System.out.println("ELEM "+ e.nextElement());
//                }
                
                //ver si esta conectado
                /*if (prov.getServices().isEmpty()) {
                    System.out.println("No se detecta el ektoken");
                }else{
                    //esta conectado
                    KeyStore keyStore = KeyStore.getInstance("PKCS11");
                    String providerName = keyStore.getProvider().getName();
                    System.out.println(providerName +" cargado!");
                }
                
                prov = Security.getProvider("SunPKCS11-Token");
                
                if (prov.getServices().isEmpty()) {
                    System.out.println("No se detecta el ektoken");
                }else{
                    //esta conectado
                    KeyStore keyStore = KeyStore.getInstance("PKCS11");
                    String providerName = keyStore.getProvider().getName();
                    System.out.println(providerName +" cargado!");
                }*/
            
                /*KeyStore keyStore1 = KeyStore.getInstance("Windows-MY", "SunMSCAPI");
                String providerName1 =keyStore1.getProvider().getName();

                keyStore1.load(null,"".toCharArray());
                
                Enumeration<String> as = keyStore1.aliases();
                while (as.hasMoreElements()) {
                    String alias = as.nextElement();
                    try {
                        X509Certificate cert = (X509Certificate) keyStore1.getCertificate(alias);

                        //Intentar obtener el cn del certificado
                        String[] aux = cert.getSubjectDN().getName().split(",");
                        String cn = (aux[0].trim().split("="))[1];
                        //Agregar el certificador a la lista
                        System.out.println("CN " + cn + " " + cert.getSubjectDN().getName());
                        
                    } catch (Exception ex) {
                        System.out.println("CN " + alias);
                        ex.printStackTrace();
                    }
                }
                    
                  */  
            
            
        }
        catch (Exception ex){
            ex.printStackTrace();
            
        }
    }
}
